
SA_Drivers_New.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000091a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  0000091a  000009ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000ae  008000ae  000009fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001327  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c7  00000000  00000000  00001e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e47  00000000  00000000  00002706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00003550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  0000366c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a27  00000000  00000000  00003b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000458a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae ea       	ldi	r26, 0xAE	; 174
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3a       	cpi	r26, 0xAF	; 175
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  8a:	0c 94 8b 04 	jmp	0x916	; 0x916 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEYPAD_init>:
uint8_t const keypad_matrix[] = {'7','8','9','/',
	'4','5','6','X',
	'1','2','3','-',
	'C','0','=','+'};
void KEYPAD_init(void){
	KEYPAD_init_Pins();
  92:	8f e0       	ldi	r24, 0x0F	; 15
  94:	84 bb       	out	0x14, r24	; 20
  96:	85 b3       	in	r24, 0x15	; 21
  98:	80 6f       	ori	r24, 0xF0	; 240
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	08 95       	ret

0000009e <KEYPAD_Read>:
}
int8_t KEYPAD_Read(void){

	K0(0);K1(1);K2(1);K3(1); //Because my targeet that to see the pull up 5 reached 0 or no
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	85 bb       	out	0x15, r24	; 21
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	85 bb       	out	0x15, r24	; 21
	
	if(K4() == 0){
  b6:	9c 9b       	sbis	0x13, 4	; 19
  b8:	5c c0       	rjmp	.+184    	; 0x172 <KEYPAD_Read+0xd4>
		return keypad_matrix[0];
	}
	if(K5() == 0){
  ba:	9d 9b       	sbis	0x13, 5	; 19
  bc:	5c c0       	rjmp	.+184    	; 0x176 <KEYPAD_Read+0xd8>
		return keypad_matrix[1];
	}
	if(K6() == 0){
  be:	9e 9b       	sbis	0x13, 6	; 19
  c0:	5c c0       	rjmp	.+184    	; 0x17a <KEYPAD_Read+0xdc>
		return keypad_matrix[2];
	}
	if(K7() == 0){
  c2:	9f 9b       	sbis	0x13, 7	; 19
  c4:	5c c0       	rjmp	.+184    	; 0x17e <KEYPAD_Read+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	97 e2       	ldi	r25, 0x27	; 39
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <KEYPAD_Read+0x2c>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <KEYPAD_Read+0x32>
  d0:	00 00       	nop
		return keypad_matrix[3];
	}

	_delay_ms(5);
	K0(1);K1(0);K2(1);K3(1);
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	85 bb       	out	0x15, r24	; 21
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	85 bb       	out	0x15, r24	; 21
	
	if(K4() == 0){
  ea:	9c 9b       	sbis	0x13, 4	; 19
  ec:	4a c0       	rjmp	.+148    	; 0x182 <KEYPAD_Read+0xe4>
		return keypad_matrix[4];
	}
	if(K5() == 0){
  ee:	9d 9b       	sbis	0x13, 5	; 19
  f0:	4a c0       	rjmp	.+148    	; 0x186 <KEYPAD_Read+0xe8>
		return keypad_matrix[5];
	}
	if(K6() == 0){
  f2:	9e 9b       	sbis	0x13, 6	; 19
  f4:	4a c0       	rjmp	.+148    	; 0x18a <KEYPAD_Read+0xec>
		return keypad_matrix[6];
	}
	if(K7() == 0){
  f6:	9f 9b       	sbis	0x13, 7	; 19
  f8:	4a c0       	rjmp	.+148    	; 0x18e <KEYPAD_Read+0xf0>
  fa:	8f e0       	ldi	r24, 0x0F	; 15
  fc:	97 e2       	ldi	r25, 0x27	; 39
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <KEYPAD_Read+0x60>
 102:	00 c0       	rjmp	.+0      	; 0x104 <KEYPAD_Read+0x66>
 104:	00 00       	nop
		return keypad_matrix[7];
	}

	_delay_ms(5);
	K0(1);K1(1);K2(0);K3(1);
 106:	85 b3       	in	r24, 0x15	; 21
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	85 bb       	out	0x15, r24	; 21
 112:	85 b3       	in	r24, 0x15	; 21
 114:	8b 7f       	andi	r24, 0xFB	; 251
 116:	85 bb       	out	0x15, r24	; 21
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	85 bb       	out	0x15, r24	; 21
	
	if(K4() == 0){
 11e:	9c 9b       	sbis	0x13, 4	; 19
 120:	38 c0       	rjmp	.+112    	; 0x192 <KEYPAD_Read+0xf4>
		return keypad_matrix[8];
	}
	if(K5() == 0){
 122:	9d 9b       	sbis	0x13, 5	; 19
 124:	38 c0       	rjmp	.+112    	; 0x196 <KEYPAD_Read+0xf8>
		return keypad_matrix[9];
	}
	if(K6() == 0){
 126:	9e 9b       	sbis	0x13, 6	; 19
 128:	38 c0       	rjmp	.+112    	; 0x19a <KEYPAD_Read+0xfc>
		return keypad_matrix[10];
	}
	if(K7() == 0){
 12a:	9f 9b       	sbis	0x13, 7	; 19
 12c:	38 c0       	rjmp	.+112    	; 0x19e <KEYPAD_Read+0x100>
 12e:	8f e0       	ldi	r24, 0x0F	; 15
 130:	97 e2       	ldi	r25, 0x27	; 39
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <KEYPAD_Read+0x94>
 136:	00 c0       	rjmp	.+0      	; 0x138 <KEYPAD_Read+0x9a>
 138:	00 00       	nop
		return keypad_matrix[11];
	}

	_delay_ms(5);
	K0(1);K1(1);K2(1);K3(0);
 13a:	85 b3       	in	r24, 0x15	; 21
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	85 bb       	out	0x15, r24	; 21
 140:	85 b3       	in	r24, 0x15	; 21
 142:	82 60       	ori	r24, 0x02	; 2
 144:	85 bb       	out	0x15, r24	; 21
 146:	85 b3       	in	r24, 0x15	; 21
 148:	84 60       	ori	r24, 0x04	; 4
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	87 7f       	andi	r24, 0xF7	; 247
 150:	85 bb       	out	0x15, r24	; 21
	
	if(K4() == 0){
 152:	9c 9b       	sbis	0x13, 4	; 19
 154:	26 c0       	rjmp	.+76     	; 0x1a2 <KEYPAD_Read+0x104>
		return keypad_matrix[12];
	}
	if(K5() == 0){
 156:	9d 9b       	sbis	0x13, 5	; 19
 158:	26 c0       	rjmp	.+76     	; 0x1a6 <KEYPAD_Read+0x108>
		return keypad_matrix[13];
	}
	if(K6() == 0){
 15a:	9e 9b       	sbis	0x13, 6	; 19
 15c:	26 c0       	rjmp	.+76     	; 0x1aa <KEYPAD_Read+0x10c>
		return keypad_matrix[14];
	}
	if(K7() == 0){
 15e:	9f 9b       	sbis	0x13, 7	; 19
 160:	26 c0       	rjmp	.+76     	; 0x1ae <KEYPAD_Read+0x110>
 162:	8f e0       	ldi	r24, 0x0F	; 15
 164:	97 e2       	ldi	r25, 0x27	; 39
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <KEYPAD_Read+0xc8>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <KEYPAD_Read+0xce>
 16c:	00 00       	nop
		return keypad_matrix[15];
	}
	_delay_ms(5);

	return -1;	
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	08 95       	ret
int8_t KEYPAD_Read(void){

	K0(0);K1(1);K2(1);K3(1); //Because my targeet that to see the pull up 5 reached 0 or no
	
	if(K4() == 0){
		return keypad_matrix[0];
 172:	87 e3       	ldi	r24, 0x37	; 55
 174:	08 95       	ret
	}
	if(K5() == 0){
		return keypad_matrix[1];
 176:	88 e3       	ldi	r24, 0x38	; 56
 178:	08 95       	ret
	}
	if(K6() == 0){
		return keypad_matrix[2];
 17a:	89 e3       	ldi	r24, 0x39	; 57
 17c:	08 95       	ret
	}
	if(K7() == 0){
		return keypad_matrix[3];
 17e:	8f e2       	ldi	r24, 0x2F	; 47
 180:	08 95       	ret

	_delay_ms(5);
	K0(1);K1(0);K2(1);K3(1);
	
	if(K4() == 0){
		return keypad_matrix[4];
 182:	84 e3       	ldi	r24, 0x34	; 52
 184:	08 95       	ret
	}
	if(K5() == 0){
		return keypad_matrix[5];
 186:	85 e3       	ldi	r24, 0x35	; 53
 188:	08 95       	ret
	}
	if(K6() == 0){
		return keypad_matrix[6];
 18a:	86 e3       	ldi	r24, 0x36	; 54
 18c:	08 95       	ret
	}
	if(K7() == 0){
		return keypad_matrix[7];
 18e:	88 e5       	ldi	r24, 0x58	; 88
 190:	08 95       	ret

	_delay_ms(5);
	K0(1);K1(1);K2(0);K3(1);
	
	if(K4() == 0){
		return keypad_matrix[8];
 192:	81 e3       	ldi	r24, 0x31	; 49
 194:	08 95       	ret
	}
	if(K5() == 0){
		return keypad_matrix[9];
 196:	82 e3       	ldi	r24, 0x32	; 50
 198:	08 95       	ret
	}
	if(K6() == 0){
		return keypad_matrix[10];
 19a:	83 e3       	ldi	r24, 0x33	; 51
 19c:	08 95       	ret
	}
	if(K7() == 0){
		return keypad_matrix[11];
 19e:	8d e2       	ldi	r24, 0x2D	; 45
 1a0:	08 95       	ret

	_delay_ms(5);
	K0(1);K1(1);K2(1);K3(0);
	
	if(K4() == 0){
		return keypad_matrix[12];
 1a2:	83 e4       	ldi	r24, 0x43	; 67
 1a4:	08 95       	ret
	}
	if(K5() == 0){
		return keypad_matrix[13];
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	08 95       	ret
	}
	if(K6() == 0){
		return keypad_matrix[14];
 1aa:	8d e3       	ldi	r24, 0x3D	; 61
 1ac:	08 95       	ret
	}
	if(K7() == 0){
		return keypad_matrix[15];
 1ae:	8b e2       	ldi	r24, 0x2B	; 43
	}
	_delay_ms(5);

	return -1;	
 1b0:	08 95       	ret

000001b2 <LCD_write_command>:

}

void LCD_write_command(uint8_t command)
{
	LCD_RS(0);
 1b2:	9b b3       	in	r25, 0x1b	; 27
 1b4:	9f 7b       	andi	r25, 0xBF	; 191
 1b6:	9b bb       	out	0x1b, r25	; 27
	
	LCD_D7(GET_BIT(command,7));
 1b8:	88 23       	and	r24, r24
 1ba:	24 f4       	brge	.+8      	; 0x1c4 <LCD_write_command+0x12>
 1bc:	9b b3       	in	r25, 0x1b	; 27
 1be:	91 60       	ori	r25, 0x01	; 1
 1c0:	9b bb       	out	0x1b, r25	; 27
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <LCD_write_command+0x18>
 1c4:	9b b3       	in	r25, 0x1b	; 27
 1c6:	9e 7f       	andi	r25, 0xFE	; 254
 1c8:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(GET_BIT(command,6));
 1ca:	86 ff       	sbrs	r24, 6
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <LCD_write_command+0x24>
 1ce:	9b b3       	in	r25, 0x1b	; 27
 1d0:	92 60       	ori	r25, 0x02	; 2
 1d2:	9b bb       	out	0x1b, r25	; 27
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <LCD_write_command+0x2a>
 1d6:	9b b3       	in	r25, 0x1b	; 27
 1d8:	9d 7f       	andi	r25, 0xFD	; 253
 1da:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(GET_BIT(command,5));
 1dc:	85 ff       	sbrs	r24, 5
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <LCD_write_command+0x36>
 1e0:	9b b3       	in	r25, 0x1b	; 27
 1e2:	94 60       	ori	r25, 0x04	; 4
 1e4:	9b bb       	out	0x1b, r25	; 27
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <LCD_write_command+0x3c>
 1e8:	9b b3       	in	r25, 0x1b	; 27
 1ea:	9b 7f       	andi	r25, 0xFB	; 251
 1ec:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(GET_BIT(command,4));
 1ee:	84 ff       	sbrs	r24, 4
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <LCD_write_command+0x48>
 1f2:	9b b3       	in	r25, 0x1b	; 27
 1f4:	98 60       	ori	r25, 0x08	; 8
 1f6:	9b bb       	out	0x1b, r25	; 27
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <LCD_write_command+0x4e>
 1fa:	9b b3       	in	r25, 0x1b	; 27
 1fc:	97 7f       	andi	r25, 0xF7	; 247
 1fe:	9b bb       	out	0x1b, r25	; 27
	
	LCD_EN(1);
 200:	9b b3       	in	r25, 0x1b	; 27
 202:	90 61       	ori	r25, 0x10	; 16
 204:	9b bb       	out	0x1b, r25	; 27
 206:	ef ec       	ldi	r30, 0xCF	; 207
 208:	f7 e0       	ldi	r31, 0x07	; 7
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_write_command+0x58>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD_write_command+0x5e>
 210:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 212:	9b b3       	in	r25, 0x1b	; 27
 214:	9f 7e       	andi	r25, 0xEF	; 239
 216:	9b bb       	out	0x1b, r25	; 27
	
	LCD_D7(GET_BIT(command,3));
 218:	83 ff       	sbrs	r24, 3
 21a:	04 c0       	rjmp	.+8      	; 0x224 <LCD_write_command+0x72>
 21c:	9b b3       	in	r25, 0x1b	; 27
 21e:	91 60       	ori	r25, 0x01	; 1
 220:	9b bb       	out	0x1b, r25	; 27
 222:	03 c0       	rjmp	.+6      	; 0x22a <LCD_write_command+0x78>
 224:	9b b3       	in	r25, 0x1b	; 27
 226:	9e 7f       	andi	r25, 0xFE	; 254
 228:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(GET_BIT(command,2));
 22a:	82 ff       	sbrs	r24, 2
 22c:	04 c0       	rjmp	.+8      	; 0x236 <LCD_write_command+0x84>
 22e:	9b b3       	in	r25, 0x1b	; 27
 230:	92 60       	ori	r25, 0x02	; 2
 232:	9b bb       	out	0x1b, r25	; 27
 234:	03 c0       	rjmp	.+6      	; 0x23c <LCD_write_command+0x8a>
 236:	9b b3       	in	r25, 0x1b	; 27
 238:	9d 7f       	andi	r25, 0xFD	; 253
 23a:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(GET_BIT(command,1));
 23c:	81 ff       	sbrs	r24, 1
 23e:	04 c0       	rjmp	.+8      	; 0x248 <LCD_write_command+0x96>
 240:	9b b3       	in	r25, 0x1b	; 27
 242:	94 60       	ori	r25, 0x04	; 4
 244:	9b bb       	out	0x1b, r25	; 27
 246:	03 c0       	rjmp	.+6      	; 0x24e <LCD_write_command+0x9c>
 248:	9b b3       	in	r25, 0x1b	; 27
 24a:	9b 7f       	andi	r25, 0xFB	; 251
 24c:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(GET_BIT(command,0));
 24e:	80 ff       	sbrs	r24, 0
 250:	04 c0       	rjmp	.+8      	; 0x25a <LCD_write_command+0xa8>
 252:	8b b3       	in	r24, 0x1b	; 27
 254:	88 60       	ori	r24, 0x08	; 8
 256:	8b bb       	out	0x1b, r24	; 27
 258:	03 c0       	rjmp	.+6      	; 0x260 <LCD_write_command+0xae>
 25a:	8b b3       	in	r24, 0x1b	; 27
 25c:	87 7f       	andi	r24, 0xF7	; 247
 25e:	8b bb       	out	0x1b, r24	; 27

	LCD_EN(1);
 260:	8b b3       	in	r24, 0x1b	; 27
 262:	80 61       	ori	r24, 0x10	; 16
 264:	8b bb       	out	0x1b, r24	; 27
 266:	8f ec       	ldi	r24, 0xCF	; 207
 268:	97 e0       	ldi	r25, 0x07	; 7
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_write_command+0xb8>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_write_command+0xbe>
 270:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 272:	8b b3       	in	r24, 0x1b	; 27
 274:	8f 7e       	andi	r24, 0xEF	; 239
 276:	8b bb       	out	0x1b, r24	; 27
 278:	ef ec       	ldi	r30, 0xCF	; 207
 27a:	f7 e0       	ldi	r31, 0x07	; 7
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_write_command+0xca>
 280:	00 c0       	rjmp	.+0      	; 0x282 <LCD_write_command+0xd0>
 282:	00 00       	nop
 284:	08 95       	ret

00000286 <LCD_init>:
 *  Author: Youssef
 */ 
#include "LCD.h"
#include "LCD_cfg.h"
void LCD_init(){
	LCD_PIN_Init();
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	8a bb       	out	0x1a, r24	; 26
	LCD_RW(0);
 28a:	8b b3       	in	r24, 0x1b	; 27
 28c:	8f 7d       	andi	r24, 0xDF	; 223
 28e:	8b bb       	out	0x1b, r24	; 27
	LCD_write_command(0x3);
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 296:	8f e3       	ldi	r24, 0x3F	; 63
 298:	9f e1       	ldi	r25, 0x1F	; 31
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_init+0x14>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_init+0x1a>
 2a0:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 2a8:	8f e3       	ldi	r24, 0x3F	; 63
 2aa:	9f e1       	ldi	r25, 0x1F	; 31
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCD_init+0x26>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <LCD_init+0x2c>
 2b2:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 2ba:	8f e3       	ldi	r24, 0x3F	; 63
 2bc:	9f e1       	ldi	r25, 0x1F	; 31
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_init+0x38>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_init+0x3e>
 2c4:	00 00       	nop
	_delay_ms(4);

	LCD_write_command(0x2); // Enable 4-bit mode
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
	
	LCD_write_command(0x28); // enable write on both lines
 2cc:	88 e2       	ldi	r24, 0x28	; 40
 2ce:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>

	LCD_write_command(0x1); // clear LCD
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
	LCD_write_command(0x6); // make curser increment to right
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
	LCD_write_command(0x0C); // turn on the display
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
 2e4:	8f e3       	ldi	r24, 0x3F	; 63
 2e6:	9c e9       	ldi	r25, 0x9C	; 156
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_init+0x62>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_init+0x68>
 2ee:	00 00       	nop
 2f0:	08 95       	ret

000002f2 <LCD_write_char>:

}

void LCD_write_char(uint8_t character){
	static uint8 number_of_char = 0;
	LCD_RS(1);
 2f2:	9b b3       	in	r25, 0x1b	; 27
 2f4:	90 64       	ori	r25, 0x40	; 64
 2f6:	9b bb       	out	0x1b, r25	; 27
	
	LCD_D7(GET_BIT(character,7));
 2f8:	88 23       	and	r24, r24
 2fa:	24 f4       	brge	.+8      	; 0x304 <LCD_write_char+0x12>
 2fc:	9b b3       	in	r25, 0x1b	; 27
 2fe:	91 60       	ori	r25, 0x01	; 1
 300:	9b bb       	out	0x1b, r25	; 27
 302:	03 c0       	rjmp	.+6      	; 0x30a <LCD_write_char+0x18>
 304:	9b b3       	in	r25, 0x1b	; 27
 306:	9e 7f       	andi	r25, 0xFE	; 254
 308:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(GET_BIT(character,6));
 30a:	86 ff       	sbrs	r24, 6
 30c:	04 c0       	rjmp	.+8      	; 0x316 <LCD_write_char+0x24>
 30e:	9b b3       	in	r25, 0x1b	; 27
 310:	92 60       	ori	r25, 0x02	; 2
 312:	9b bb       	out	0x1b, r25	; 27
 314:	03 c0       	rjmp	.+6      	; 0x31c <LCD_write_char+0x2a>
 316:	9b b3       	in	r25, 0x1b	; 27
 318:	9d 7f       	andi	r25, 0xFD	; 253
 31a:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(GET_BIT(character,5));
 31c:	85 ff       	sbrs	r24, 5
 31e:	04 c0       	rjmp	.+8      	; 0x328 <LCD_write_char+0x36>
 320:	9b b3       	in	r25, 0x1b	; 27
 322:	94 60       	ori	r25, 0x04	; 4
 324:	9b bb       	out	0x1b, r25	; 27
 326:	03 c0       	rjmp	.+6      	; 0x32e <LCD_write_char+0x3c>
 328:	9b b3       	in	r25, 0x1b	; 27
 32a:	9b 7f       	andi	r25, 0xFB	; 251
 32c:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(GET_BIT(character,4));	
 32e:	84 ff       	sbrs	r24, 4
 330:	04 c0       	rjmp	.+8      	; 0x33a <LCD_write_char+0x48>
 332:	9b b3       	in	r25, 0x1b	; 27
 334:	98 60       	ori	r25, 0x08	; 8
 336:	9b bb       	out	0x1b, r25	; 27
 338:	03 c0       	rjmp	.+6      	; 0x340 <LCD_write_char+0x4e>
 33a:	9b b3       	in	r25, 0x1b	; 27
 33c:	97 7f       	andi	r25, 0xF7	; 247
 33e:	9b bb       	out	0x1b, r25	; 27
	
	LCD_EN(1);
 340:	9b b3       	in	r25, 0x1b	; 27
 342:	90 61       	ori	r25, 0x10	; 16
 344:	9b bb       	out	0x1b, r25	; 27
 346:	ef ec       	ldi	r30, 0xCF	; 207
 348:	f7 e0       	ldi	r31, 0x07	; 7
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCD_write_char+0x58>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <LCD_write_char+0x5e>
 350:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 352:	9b b3       	in	r25, 0x1b	; 27
 354:	9f 7e       	andi	r25, 0xEF	; 239
 356:	9b bb       	out	0x1b, r25	; 27
	
	LCD_D7(GET_BIT(character,3));
 358:	83 ff       	sbrs	r24, 3
 35a:	04 c0       	rjmp	.+8      	; 0x364 <LCD_write_char+0x72>
 35c:	9b b3       	in	r25, 0x1b	; 27
 35e:	91 60       	ori	r25, 0x01	; 1
 360:	9b bb       	out	0x1b, r25	; 27
 362:	03 c0       	rjmp	.+6      	; 0x36a <LCD_write_char+0x78>
 364:	9b b3       	in	r25, 0x1b	; 27
 366:	9e 7f       	andi	r25, 0xFE	; 254
 368:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(GET_BIT(character,2));
 36a:	82 ff       	sbrs	r24, 2
 36c:	04 c0       	rjmp	.+8      	; 0x376 <LCD_write_char+0x84>
 36e:	9b b3       	in	r25, 0x1b	; 27
 370:	92 60       	ori	r25, 0x02	; 2
 372:	9b bb       	out	0x1b, r25	; 27
 374:	03 c0       	rjmp	.+6      	; 0x37c <LCD_write_char+0x8a>
 376:	9b b3       	in	r25, 0x1b	; 27
 378:	9d 7f       	andi	r25, 0xFD	; 253
 37a:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(GET_BIT(character,1));
 37c:	81 ff       	sbrs	r24, 1
 37e:	04 c0       	rjmp	.+8      	; 0x388 <LCD_write_char+0x96>
 380:	9b b3       	in	r25, 0x1b	; 27
 382:	94 60       	ori	r25, 0x04	; 4
 384:	9b bb       	out	0x1b, r25	; 27
 386:	03 c0       	rjmp	.+6      	; 0x38e <LCD_write_char+0x9c>
 388:	9b b3       	in	r25, 0x1b	; 27
 38a:	9b 7f       	andi	r25, 0xFB	; 251
 38c:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(GET_BIT(character,0));
 38e:	80 ff       	sbrs	r24, 0
 390:	04 c0       	rjmp	.+8      	; 0x39a <LCD_write_char+0xa8>
 392:	8b b3       	in	r24, 0x1b	; 27
 394:	88 60       	ori	r24, 0x08	; 8
 396:	8b bb       	out	0x1b, r24	; 27
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <LCD_write_char+0xae>
 39a:	8b b3       	in	r24, 0x1b	; 27
 39c:	87 7f       	andi	r24, 0xF7	; 247
 39e:	8b bb       	out	0x1b, r24	; 27

	LCD_EN(1);
 3a0:	8b b3       	in	r24, 0x1b	; 27
 3a2:	80 61       	ori	r24, 0x10	; 16
 3a4:	8b bb       	out	0x1b, r24	; 27
 3a6:	8f ec       	ldi	r24, 0xCF	; 207
 3a8:	97 e0       	ldi	r25, 0x07	; 7
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <LCD_write_char+0xb8>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <LCD_write_char+0xbe>
 3b0:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 3b2:	8b b3       	in	r24, 0x1b	; 27
 3b4:	8f 7e       	andi	r24, 0xEF	; 239
 3b6:	8b bb       	out	0x1b, r24	; 27
 3b8:	ef ec       	ldi	r30, 0xCF	; 207
 3ba:	f7 e0       	ldi	r31, 0x07	; 7
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_write_char+0xca>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_write_char+0xd0>
 3c2:	00 00       	nop
	_delay_ms(1);

	number_of_char++;
 3c4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
 3ca:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
 3ce:	08 95       	ret

000003d0 <LCD_write_string>:
	//in case it the last line go to the bellow line

}


void LCD_write_string(uint8_t * string){
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; string[i] != '\0'; i++)
 3d8:	c0 e0       	ldi	r28, 0x00	; 0
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <LCD_write_string+0x12>
	{
		LCD_write_char(string[i]);
 3dc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_write_char>

}


void LCD_write_string(uint8_t * string){
	for(uint8_t i = 0; string[i] != '\0'; i++)
 3e0:	cf 5f       	subi	r28, 0xFF	; 255
 3e2:	f8 01       	movw	r30, r16
 3e4:	ec 0f       	add	r30, r28
 3e6:	f1 1d       	adc	r31, r1
 3e8:	80 81       	ld	r24, Z
 3ea:	81 11       	cpse	r24, r1
 3ec:	f7 cf       	rjmp	.-18     	; 0x3dc <LCD_write_string+0xc>
	{
		LCD_write_char(string[i]);
	}
}
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	08 95       	ret

000003f6 <LCD_write_num>:
void LCD_write_num(uint16_t data){
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	2a 97       	sbiw	r28, 0x0a	; 10
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	ac 01       	movw	r20, r24
	uint8_t arr[10];
	uint8_t arr_size = 0;
 410:	10 e0       	ldi	r17, 0x00	; 0
	while(data != 0)
 412:	2b c0       	rjmp	.+86     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		{
		// 1234 
		arr[arr_size++] = data%10;
 414:	9a 01       	movw	r18, r20
 416:	ad ec       	ldi	r26, 0xCD	; 205
 418:	bc ec       	ldi	r27, 0xCC	; 204
 41a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__umulhisi3>
 41e:	96 95       	lsr	r25
 420:	87 95       	ror	r24
 422:	96 95       	lsr	r25
 424:	87 95       	ror	r24
 426:	96 95       	lsr	r25
 428:	87 95       	ror	r24
 42a:	9c 01       	movw	r18, r24
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	82 0f       	add	r24, r18
 43e:	93 1f       	adc	r25, r19
 440:	9a 01       	movw	r18, r20
 442:	28 1b       	sub	r18, r24
 444:	39 0b       	sbc	r19, r25
 446:	e1 e0       	ldi	r30, 0x01	; 1
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	ec 0f       	add	r30, r28
 44c:	fd 1f       	adc	r31, r29
 44e:	e1 0f       	add	r30, r17
 450:	f1 1d       	adc	r31, r1
 452:	20 83       	st	Z, r18
		data = data/10; 
 454:	9a 01       	movw	r18, r20
 456:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__umulhisi3>
 45a:	ac 01       	movw	r20, r24
 45c:	56 95       	lsr	r21
 45e:	47 95       	ror	r20
 460:	56 95       	lsr	r21
 462:	47 95       	ror	r20
 464:	56 95       	lsr	r21
 466:	47 95       	ror	r20
	uint8_t arr[10];
	uint8_t arr_size = 0;
	while(data != 0)
		{
		// 1234 
		arr[arr_size++] = data%10;
 468:	1f 5f       	subi	r17, 0xFF	; 255
	}
}
void LCD_write_num(uint16_t data){
	uint8_t arr[10];
	uint8_t arr_size = 0;
	while(data != 0)
 46a:	41 15       	cp	r20, r1
 46c:	51 05       	cpc	r21, r1
 46e:	91 f6       	brne	.-92     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 470:	00 e0       	ldi	r16, 0x00	; 0
 472:	10 c0       	rjmp	.+32     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
		arr[arr_size++] = data%10;
		data = data/10; 
		}		
	for (uint8_t i = 0; i < arr_size; i++)
	{
		LCD_write_char(arr[arr_size-i-1] + 48);
 474:	e1 2f       	mov	r30, r17
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	e0 1b       	sub	r30, r16
 47a:	f1 09       	sbc	r31, r1
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	8c 0f       	add	r24, r28
 484:	9d 1f       	adc	r25, r29
 486:	e8 0f       	add	r30, r24
 488:	f9 1f       	adc	r31, r25
 48a:	80 81       	ld	r24, Z
 48c:	80 5d       	subi	r24, 0xD0	; 208
 48e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_write_char>
		{
		// 1234 
		arr[arr_size++] = data%10;
		data = data/10; 
		}		
	for (uint8_t i = 0; i < arr_size; i++)
 492:	0f 5f       	subi	r16, 0xFF	; 255
 494:	01 17       	cp	r16, r17
 496:	70 f3       	brcs	.-36     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
		LCD_write_char(arr[arr_size-i-1] + 48);

	}
	
		
 498:	2a 96       	adiw	r28, 0x0a	; 10
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	08 95       	ret

000004ae <EEPROM_write>:

#include "EEPROM.h"
void EEPROM_write (uint16_t address,uint8_t data)
{
  
   while(GET_BIT(EECR,EEWE) != 0);
 4ae:	e1 99       	sbic	0x1c, 1	; 28
 4b0:	fe cf       	rjmp	.-4      	; 0x4ae <EEPROM_write>
   // This step grantee that their is no more writing
   // in previous step 
   
   //while(GET_BIT(SPMEN,0) !=0); // Bootloader (flashing)

   EEARH = (address >> 8) & 0xFF;
 4b2:	9f bb       	out	0x1f, r25	; 31
   EEARL = address & 0xFF;
 4b4:	8e bb       	out	0x1e, r24	; 30
   
   //EEAR = address atmel studio handle this
   EEDR = data;
 4b6:	6d bb       	out	0x1d, r22	; 29

   SET_BIT(EECR,EEMWE); // Master write enable
 4b8:	8c b3       	in	r24, 0x1c	; 28
 4ba:	84 60       	ori	r24, 0x04	; 4
 4bc:	8c bb       	out	0x1c, r24	; 28
			
	SET_BIT(EECR,EEWE); 
 4be:	8c b3       	in	r24, 0x1c	; 28
 4c0:	82 60       	ori	r24, 0x02	; 2
 4c2:	8c bb       	out	0x1c, r24	; 28
 4c4:	08 95       	ret

000004c6 <EEPROM_read>:
   //the HW automatically make it zero.
}

uint8_t EEPROM_read (uint16_t address)
{
   while(GET_BIT(EECR,EEWE) != 0); // Just to grantee that their is not writing
 4c6:	e1 99       	sbic	0x1c, 1	; 28
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <EEPROM_read>
   EEARH = (address >> 8) & 0xFF;
 4ca:	9f bb       	out	0x1f, r25	; 31
   EEARL = address & 0xFF;
 4cc:	8e bb       	out	0x1e, r24	; 30
   SET_BIT(EECR,EERE); // Enable reading
 4ce:	8c b3       	in	r24, 0x1c	; 28
 4d0:	81 60       	ori	r24, 0x01	; 1
 4d2:	8c bb       	out	0x1c, r24	; 28
   return EEDR;
 4d4:	8d b3       	in	r24, 0x1d	; 29
	
}
 4d6:	08 95       	ret

000004d8 <main>:
#include "Locker_System_cfg.h"

int main(){
	
	
	LCD_init();
 4d8:	0e 94 43 01 	call	0x286	; 0x286 <LCD_init>
	KEYPAD_init();
 4dc:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_init>
	Led_Init();
 4e0:	87 b3       	in	r24, 0x17	; 23
 4e2:	81 60       	ori	r24, 0x01	; 1
 4e4:	87 bb       	out	0x17, r24	; 23
	
	
	uint16_t lockerPassword = EEPROM_read(20)*100 + EEPROM_read(21);
 4e6:	84 e1       	ldi	r24, 0x14	; 20
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 63 02 	call	0x4c6	; 0x4c6 <EEPROM_read>
 4ee:	24 e6       	ldi	r18, 0x64	; 100
 4f0:	82 9f       	mul	r24, r18
 4f2:	e0 01       	movw	r28, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	85 e1       	ldi	r24, 0x15	; 21
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 63 02 	call	0x4c6	; 0x4c6 <EEPROM_read>
 4fe:	c8 0f       	add	r28, r24
 500:	d1 1d       	adc	r29, r1
	 
	int32_t num1 = -1;
	uint16_t currentPassword;
	uint8_t openState = 1; // Door is initially opened
	int8 keypadValue;
	uint8 resetPassword = 0;
 502:	00 e0       	ldi	r16, 0x00	; 0
	
	uint16_t lockerPassword = EEPROM_read(20)*100 + EEPROM_read(21);
	 
	int32_t num1 = -1;
	uint16_t currentPassword;
	uint8_t openState = 1; // Door is initially opened
 504:	bb 24       	eor	r11, r11
 506:	b3 94       	inc	r11
	int8 keypadValue;
	uint8 resetPassword = 0;
	while (1)
	{
 		keypadValue = KEYPAD_Read(); 
 508:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 50c:	18 2f       	mov	r17, r24
			 		 
		 if (keypadValue == '/'){
 50e:	8f 32       	cpi	r24, 0x2F	; 47
 510:	09 f0       	breq	.+2      	; 0x514 <main+0x3c>
 512:	e3 c0       	rjmp	.+454    	; 0x6da <main+0x202>
			resetPassword = 0; 
			Led(1);
 514:	88 b3       	in	r24, 0x18	; 24
 516:	81 60       	ori	r24, 0x01	; 1
 518:	88 bb       	out	0x18, r24	; 24
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	9d e3       	ldi	r25, 0x3D	; 61
 51e:	29 e4       	ldi	r18, 0x49	; 73
 520:	81 50       	subi	r24, 0x01	; 1
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	20 40       	sbci	r18, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <main+0x48>
 528:	00 c0       	rjmp	.+0      	; 0x52a <main+0x52>
 52a:	00 00       	nop

			_delay_ms(3000);
			
			Led(0);
 52c:	88 b3       	in	r24, 0x18	; 24
 52e:	8e 7f       	andi	r24, 0xFE	; 254
 530:	88 bb       	out	0x18, r24	; 24
			
			LCD_write_command(0x01); //Clear display
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
			
			
			LCD_write_string((uint8_t * )"New Pw:");
 538:	80 e6       	ldi	r24, 0x60	; 96
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_write_string>
			
			// First number
			num1 = -1;
 540:	cc 24       	eor	r12, r12
 542:	ca 94       	dec	r12
 544:	dc 2c       	mov	r13, r12
 546:	76 01       	movw	r14, r12
			while(num1 == -1){
 548:	07 c0       	rjmp	.+14     	; 0x558 <main+0x80>
				num1 = KEYPAD_Read();
 54a:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 54e:	c8 2e       	mov	r12, r24
 550:	88 0f       	add	r24, r24
 552:	dd 08       	sbc	r13, r13
 554:	ee 08       	sbc	r14, r14
 556:	ff 08       	sbc	r15, r15
			
			LCD_write_string((uint8_t * )"New Pw:");
			
			// First number
			num1 = -1;
			while(num1 == -1){
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	c8 16       	cp	r12, r24
 55c:	d8 06       	cpc	r13, r24
 55e:	e8 06       	cpc	r14, r24
 560:	f8 06       	cpc	r15, r24
 562:	99 f3       	breq	.-26     	; 0x54a <main+0x72>
				num1 = KEYPAD_Read();
			}
			while (KEYPAD_Read() != -1);
 564:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 568:	8f 3f       	cpi	r24, 0xFF	; 255
 56a:	e1 f7       	brne	.-8      	; 0x564 <main+0x8c>

			num1 = num1 - 48; // convert to it's real int value
 56c:	90 e3       	ldi	r25, 0x30	; 48
 56e:	c9 1a       	sub	r12, r25
 570:	d1 08       	sbc	r13, r1
 572:	e1 08       	sbc	r14, r1
 574:	f1 08       	sbc	r15, r1
			LCD_write_char('*');
 576:	8a e2       	ldi	r24, 0x2A	; 42
 578:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_write_char>

			lockerPassword = (num1*1000); //It's integar not hex take care from this point
 57c:	88 ee       	ldi	r24, 0xE8	; 232
 57e:	93 e0       	ldi	r25, 0x03	; 3
 580:	c8 9e       	mul	r12, r24
 582:	e0 01       	movw	r28, r0
 584:	c9 9e       	mul	r12, r25
 586:	d0 0d       	add	r29, r0
 588:	d8 9e       	mul	r13, r24
 58a:	d0 0d       	add	r29, r0
 58c:	11 24       	eor	r1, r1

			// Second Number
			num1 = -1;
 58e:	cc 24       	eor	r12, r12
 590:	ca 94       	dec	r12
 592:	dc 2c       	mov	r13, r12
 594:	76 01       	movw	r14, r12
			while(num1 == -1){
 596:	07 c0       	rjmp	.+14     	; 0x5a6 <main+0xce>
				num1 = KEYPAD_Read();
 598:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 59c:	c8 2e       	mov	r12, r24
 59e:	88 0f       	add	r24, r24
 5a0:	dd 08       	sbc	r13, r13
 5a2:	ee 08       	sbc	r14, r14
 5a4:	ff 08       	sbc	r15, r15

			lockerPassword = (num1*1000); //It's integar not hex take care from this point

			// Second Number
			num1 = -1;
			while(num1 == -1){
 5a6:	2f ef       	ldi	r18, 0xFF	; 255
 5a8:	c2 16       	cp	r12, r18
 5aa:	d2 06       	cpc	r13, r18
 5ac:	e2 06       	cpc	r14, r18
 5ae:	f2 06       	cpc	r15, r18
 5b0:	99 f3       	breq	.-26     	; 0x598 <main+0xc0>
				num1 = KEYPAD_Read();
				
			}
			while (KEYPAD_Read() != -1);
 5b2:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 5b6:	8f 3f       	cpi	r24, 0xFF	; 255
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <main+0xda>

			num1 = num1 - 48; // convert to it's real int value
 5ba:	80 e3       	ldi	r24, 0x30	; 48
 5bc:	c8 1a       	sub	r12, r24
 5be:	d1 08       	sbc	r13, r1
 5c0:	e1 08       	sbc	r14, r1
 5c2:	f1 08       	sbc	r15, r1
			LCD_write_char('*');
 5c4:	8a e2       	ldi	r24, 0x2A	; 42
 5c6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_write_char>

			lockerPassword += (num1 * 100) ;
 5ca:	84 e6       	ldi	r24, 0x64	; 100
 5cc:	8c 9d       	mul	r24, r12
 5ce:	80 01       	movw	r16, r0
 5d0:	8d 9d       	mul	r24, r13
 5d2:	10 0d       	add	r17, r0
 5d4:	11 24       	eor	r1, r1
 5d6:	0c 0f       	add	r16, r28
 5d8:	1d 1f       	adc	r17, r29
			
			// Third Number
			num1 = -1;
 5da:	cc 24       	eor	r12, r12
 5dc:	ca 94       	dec	r12
 5de:	dc 2c       	mov	r13, r12
 5e0:	76 01       	movw	r14, r12
			while(num1 == -1){
 5e2:	07 c0       	rjmp	.+14     	; 0x5f2 <main+0x11a>
				num1 = KEYPAD_Read();
 5e4:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 5e8:	c8 2e       	mov	r12, r24
 5ea:	88 0f       	add	r24, r24
 5ec:	dd 08       	sbc	r13, r13
 5ee:	ee 08       	sbc	r14, r14
 5f0:	ff 08       	sbc	r15, r15

			lockerPassword += (num1 * 100) ;
			
			// Third Number
			num1 = -1;
			while(num1 == -1){
 5f2:	9f ef       	ldi	r25, 0xFF	; 255
 5f4:	c9 16       	cp	r12, r25
 5f6:	d9 06       	cpc	r13, r25
 5f8:	e9 06       	cpc	r14, r25
 5fa:	f9 06       	cpc	r15, r25
 5fc:	99 f3       	breq	.-26     	; 0x5e4 <main+0x10c>
				num1 = KEYPAD_Read();
			}
			
			while (KEYPAD_Read() != -1); // WAITING until the pressing removed
 5fe:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 602:	8f 3f       	cpi	r24, 0xFF	; 255
 604:	e1 f7       	brne	.-8      	; 0x5fe <main+0x126>
			num1 = num1 - 48; // convert to it's real int value
 606:	20 e3       	ldi	r18, 0x30	; 48
 608:	c2 1a       	sub	r12, r18
 60a:	d1 08       	sbc	r13, r1
 60c:	e1 08       	sbc	r14, r1
 60e:	f1 08       	sbc	r15, r1
			LCD_write_char('*');
 610:	8a e2       	ldi	r24, 0x2A	; 42
 612:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_write_char>
								
			lockerPassword += (num1 * 10);
 616:	e6 01       	movw	r28, r12
 618:	cc 0f       	add	r28, r28
 61a:	dd 1f       	adc	r29, r29
 61c:	cc 0c       	add	r12, r12
 61e:	dd 1c       	adc	r13, r13
 620:	cc 0c       	add	r12, r12
 622:	dd 1c       	adc	r13, r13
 624:	cc 0c       	add	r12, r12
 626:	dd 1c       	adc	r13, r13
 628:	cc 0e       	add	r12, r28
 62a:	dd 1e       	adc	r13, r29
 62c:	c0 0e       	add	r12, r16
 62e:	d1 1e       	adc	r13, r17
			
			// Fourth number
			num1 = -1;
 630:	44 24       	eor	r4, r4
 632:	4a 94       	dec	r4
 634:	54 2c       	mov	r5, r4
 636:	32 01       	movw	r6, r4
			while(num1 == -1){
 638:	07 c0       	rjmp	.+14     	; 0x648 <main+0x170>
				num1 = KEYPAD_Read();
 63a:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 63e:	48 2e       	mov	r4, r24
 640:	88 0f       	add	r24, r24
 642:	55 08       	sbc	r5, r5
 644:	66 08       	sbc	r6, r6
 646:	77 08       	sbc	r7, r7
								
			lockerPassword += (num1 * 10);
			
			// Fourth number
			num1 = -1;
			while(num1 == -1){
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	48 16       	cp	r4, r24
 64c:	58 06       	cpc	r5, r24
 64e:	68 06       	cpc	r6, r24
 650:	78 06       	cpc	r7, r24
 652:	99 f3       	breq	.-26     	; 0x63a <main+0x162>
				num1 = KEYPAD_Read();
			}
			while (KEYPAD_Read() != -1);
 654:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 658:	8f 3f       	cpi	r24, 0xFF	; 255
 65a:	e1 f7       	brne	.-8      	; 0x654 <main+0x17c>
			num1 = num1 - 48; // convert to it's real int value
 65c:	90 e3       	ldi	r25, 0x30	; 48
 65e:	49 1a       	sub	r4, r25
 660:	51 08       	sbc	r5, r1
 662:	61 08       	sbc	r6, r1
 664:	71 08       	sbc	r7, r1
			LCD_write_char('*');
 666:	8a e2       	ldi	r24, 0x2A	; 42
 668:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_write_char>

			lockerPassword += num1 ;
 66c:	e6 01       	movw	r28, r12
 66e:	c4 0d       	add	r28, r4
 670:	d5 1d       	adc	r29, r5
 672:	2f ef       	ldi	r18, 0xFF	; 255
 674:	84 e3       	ldi	r24, 0x34	; 52
 676:	9c e0       	ldi	r25, 0x0C	; 12
 678:	21 50       	subi	r18, 0x01	; 1
 67a:	80 40       	sbci	r24, 0x00	; 0
 67c:	90 40       	sbci	r25, 0x00	; 0
 67e:	e1 f7       	brne	.-8      	; 0x678 <main+0x1a0>
 680:	00 c0       	rjmp	.+0      	; 0x682 <main+0x1aa>
 682:	00 00       	nop
					
			_delay_ms(500);
			
			LCD_write_command(0x01);
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
			LCD_write_string((uint8_t *) "Your new PW:");
 68a:	88 e6       	ldi	r24, 0x68	; 104
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_write_string>
			LCD_write_num(lockerPassword);
 692:	ce 01       	movw	r24, r28
 694:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_write_num>
			
			EEPROM_write(20,lockerPassword/100);
 698:	7e 01       	movw	r14, r28
 69a:	f6 94       	lsr	r15
 69c:	e7 94       	ror	r14
 69e:	f6 94       	lsr	r15
 6a0:	e7 94       	ror	r14
 6a2:	97 01       	movw	r18, r14
 6a4:	ab e7       	ldi	r26, 0x7B	; 123
 6a6:	b4 e1       	ldi	r27, 0x14	; 20
 6a8:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__umulhisi3>
 6ac:	8c 01       	movw	r16, r24
 6ae:	16 95       	lsr	r17
 6b0:	07 95       	ror	r16
 6b2:	60 2f       	mov	r22, r16
 6b4:	84 e1       	ldi	r24, 0x14	; 20
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 57 02 	call	0x4ae	; 0x4ae <EEPROM_write>
			EEPROM_write(21,lockerPassword%100);
 6bc:	24 e6       	ldi	r18, 0x64	; 100
 6be:	20 9f       	mul	r18, r16
 6c0:	c0 01       	movw	r24, r0
 6c2:	21 9f       	mul	r18, r17
 6c4:	90 0d       	add	r25, r0
 6c6:	11 24       	eor	r1, r1
 6c8:	be 01       	movw	r22, r28
 6ca:	68 1b       	sub	r22, r24
 6cc:	79 0b       	sbc	r23, r25
 6ce:	85 e1       	ldi	r24, 0x15	; 21
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 57 02 	call	0x4ae	; 0x4ae <EEPROM_write>
	while (1)
	{
 		keypadValue = KEYPAD_Read(); 
			 		 
		 if (keypadValue == '/'){
			resetPassword = 0; 
 6d6:	00 e0       	ldi	r16, 0x00	; 0
 6d8:	17 cf       	rjmp	.-466    	; 0x508 <main+0x30>
			LCD_write_num(lockerPassword);
			
			EEPROM_write(20,lockerPassword/100);
			EEPROM_write(21,lockerPassword%100);
		 }
		 else  if (keypadValue == 'X'){
 6da:	88 35       	cpi	r24, 0x58	; 88
 6dc:	e9 f4       	brne	.+58     	; 0x718 <main+0x240>
			resetPassword = 0;
			openState = 0;
			Led(1);
 6de:	88 b3       	in	r24, 0x18	; 24
 6e0:	81 60       	ori	r24, 0x01	; 1
 6e2:	88 bb       	out	0x18, r24	; 24
 6e4:	2f ef       	ldi	r18, 0xFF	; 255
 6e6:	84 e3       	ldi	r24, 0x34	; 52
 6e8:	9c e0       	ldi	r25, 0x0C	; 12
 6ea:	21 50       	subi	r18, 0x01	; 1
 6ec:	80 40       	sbci	r24, 0x00	; 0
 6ee:	90 40       	sbci	r25, 0x00	; 0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <main+0x212>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <main+0x21c>
 6f4:	00 00       	nop
			_delay_ms(500);
			Led(0);
 6f6:	88 b3       	in	r24, 0x18	; 24
 6f8:	8e 7f       	andi	r24, 0xFE	; 254
 6fa:	88 bb       	out	0x18, r24	; 24
			
			while (KEYPAD_Read() != -1);
 6fc:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 700:	8f 3f       	cpi	r24, 0xFF	; 255
 702:	e1 f7       	brne	.-8      	; 0x6fc <main+0x224>
			LCD_write_command(0x01);
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
			LCD_write_string((uint8_t * )"Door Is Locked ");
 70a:	85 e7       	ldi	r24, 0x75	; 117
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_write_string>
			
			EEPROM_write(20,lockerPassword/100);
			EEPROM_write(21,lockerPassword%100);
		 }
		 else  if (keypadValue == 'X'){
			resetPassword = 0;
 712:	00 e0       	ldi	r16, 0x00	; 0
			openState = 0;
 714:	b1 2c       	mov	r11, r1
 716:	f8 ce       	rjmp	.-528    	; 0x508 <main+0x30>
			LCD_write_command(0x01);
			LCD_write_string((uint8_t * )"Door Is Locked ");
		 }
		 
		 
		 else if (keypadValue != -1 && openState == 0) {
 718:	8f 3f       	cpi	r24, 0xFF	; 255
 71a:	09 f4       	brne	.+2      	; 0x71e <main+0x246>
 71c:	be c0       	rjmp	.+380    	; 0x89a <__stack+0x3b>
 71e:	b1 10       	cpse	r11, r1
 720:	bc c0       	rjmp	.+376    	; 0x89a <__stack+0x3b>
			resetPassword = 0;
		
			LCD_write_command(0x01); //Clear display
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
		
			while (KEYPAD_Read() != -1);
 728:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 72c:	8f 3f       	cpi	r24, 0xFF	; 255
 72e:	e1 f7       	brne	.-8      	; 0x728 <main+0x250>

			num1 = keypadValue - 48; // convert to it's real int value
 730:	e1 2e       	mov	r14, r17
 732:	11 0f       	add	r17, r17
 734:	ff 08       	sbc	r15, r15
 736:	20 e3       	ldi	r18, 0x30	; 48
 738:	e2 1a       	sub	r14, r18
 73a:	f1 08       	sbc	r15, r1
			LCD_write_char('*');
 73c:	8a e2       	ldi	r24, 0x2A	; 42
 73e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_write_char>

			currentPassword = (num1*1000); //It's integar not hex take care from this point
 742:	88 ee       	ldi	r24, 0xE8	; 232
 744:	93 e0       	ldi	r25, 0x03	; 3
 746:	e8 9e       	mul	r14, r24
 748:	80 01       	movw	r16, r0
 74a:	e9 9e       	mul	r14, r25
 74c:	10 0d       	add	r17, r0
 74e:	f8 9e       	mul	r15, r24
 750:	10 0d       	add	r17, r0
 752:	11 24       	eor	r1, r1

			// Second Number
			num1 = -1;
 754:	cc 24       	eor	r12, r12
 756:	ca 94       	dec	r12
 758:	dc 2c       	mov	r13, r12
 75a:	76 01       	movw	r14, r12
			while(num1 == -1){
 75c:	07 c0       	rjmp	.+14     	; 0x76c <main+0x294>
				num1 = KEYPAD_Read();
 75e:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 762:	c8 2e       	mov	r12, r24
 764:	88 0f       	add	r24, r24
 766:	dd 08       	sbc	r13, r13
 768:	ee 08       	sbc	r14, r14
 76a:	ff 08       	sbc	r15, r15

			currentPassword = (num1*1000); //It's integar not hex take care from this point

			// Second Number
			num1 = -1;
			while(num1 == -1){
 76c:	8f ef       	ldi	r24, 0xFF	; 255
 76e:	c8 16       	cp	r12, r24
 770:	d8 06       	cpc	r13, r24
 772:	e8 06       	cpc	r14, r24
 774:	f8 06       	cpc	r15, r24
 776:	99 f3       	breq	.-26     	; 0x75e <main+0x286>
				num1 = KEYPAD_Read();
			
			}
			while (KEYPAD_Read() != -1);
 778:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 77c:	8f 3f       	cpi	r24, 0xFF	; 255
 77e:	e1 f7       	brne	.-8      	; 0x778 <main+0x2a0>

			num1 = num1 - 48; // convert to it's real int value
 780:	90 e3       	ldi	r25, 0x30	; 48
 782:	c9 1a       	sub	r12, r25
 784:	d1 08       	sbc	r13, r1
 786:	e1 08       	sbc	r14, r1
 788:	f1 08       	sbc	r15, r1
			LCD_write_char('*');
 78a:	8a e2       	ldi	r24, 0x2A	; 42
 78c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_write_char>

			currentPassword += (num1 * 100) ;
 790:	24 e6       	ldi	r18, 0x64	; 100
 792:	2c 9d       	mul	r18, r12
 794:	c0 01       	movw	r24, r0
 796:	2d 9d       	mul	r18, r13
 798:	90 0d       	add	r25, r0
 79a:	11 24       	eor	r1, r1
 79c:	08 0f       	add	r16, r24
 79e:	19 1f       	adc	r17, r25
		
			// Third Number
			num1 = -1;
 7a0:	cc 24       	eor	r12, r12
 7a2:	ca 94       	dec	r12
 7a4:	dc 2c       	mov	r13, r12
 7a6:	76 01       	movw	r14, r12
			while(num1 == -1){
 7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <main+0x2e0>
				num1 = KEYPAD_Read();
 7aa:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 7ae:	c8 2e       	mov	r12, r24
 7b0:	88 0f       	add	r24, r24
 7b2:	dd 08       	sbc	r13, r13
 7b4:	ee 08       	sbc	r14, r14
 7b6:	ff 08       	sbc	r15, r15

			currentPassword += (num1 * 100) ;
		
			// Third Number
			num1 = -1;
			while(num1 == -1){
 7b8:	2f ef       	ldi	r18, 0xFF	; 255
 7ba:	c2 16       	cp	r12, r18
 7bc:	d2 06       	cpc	r13, r18
 7be:	e2 06       	cpc	r14, r18
 7c0:	f2 06       	cpc	r15, r18
 7c2:	99 f3       	breq	.-26     	; 0x7aa <main+0x2d2>
				num1 = KEYPAD_Read();
			}
		
			while (KEYPAD_Read() != -1); // WAITING until the pressing removed
 7c4:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 7c8:	8f 3f       	cpi	r24, 0xFF	; 255
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <main+0x2ec>
			num1 = num1 - 48; // convert to it's real int value
 7cc:	80 e3       	ldi	r24, 0x30	; 48
 7ce:	c8 1a       	sub	r12, r24
 7d0:	d1 08       	sbc	r13, r1
 7d2:	e1 08       	sbc	r14, r1
 7d4:	f1 08       	sbc	r15, r1
			LCD_write_char('*');
 7d6:	8a e2       	ldi	r24, 0x2A	; 42
 7d8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_write_char>
		
			currentPassword += (num1 * 10);
 7dc:	c6 01       	movw	r24, r12
 7de:	88 0f       	add	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	cc 0c       	add	r12, r12
 7e4:	dd 1c       	adc	r13, r13
 7e6:	cc 0c       	add	r12, r12
 7e8:	dd 1c       	adc	r13, r13
 7ea:	cc 0c       	add	r12, r12
 7ec:	dd 1c       	adc	r13, r13
 7ee:	c8 0e       	add	r12, r24
 7f0:	d9 1e       	adc	r13, r25
 7f2:	c0 0e       	add	r12, r16
 7f4:	d1 1e       	adc	r13, r17
		
			// Fourth number
			num1 = -1;
 7f6:	44 24       	eor	r4, r4
 7f8:	4a 94       	dec	r4
 7fa:	54 2c       	mov	r5, r4
 7fc:	32 01       	movw	r6, r4
			while(num1 == -1){
 7fe:	07 c0       	rjmp	.+14     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
				num1 = KEYPAD_Read();
 800:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 804:	48 2e       	mov	r4, r24
 806:	88 0f       	add	r24, r24
 808:	55 08       	sbc	r5, r5
 80a:	66 08       	sbc	r6, r6
 80c:	77 08       	sbc	r7, r7
		
			currentPassword += (num1 * 10);
		
			// Fourth number
			num1 = -1;
			while(num1 == -1){
 80e:	9f ef       	ldi	r25, 0xFF	; 255
 810:	49 16       	cp	r4, r25
 812:	59 06       	cpc	r5, r25
 814:	69 06       	cpc	r6, r25
 816:	79 06       	cpc	r7, r25
 818:	99 f3       	breq	.-26     	; 0x800 <__DATA_REGION_LENGTH__>
				num1 = KEYPAD_Read();
			}
			while (KEYPAD_Read() != -1);
 81a:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 81e:	8f 3f       	cpi	r24, 0xFF	; 255
 820:	e1 f7       	brne	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
			num1 = num1 - 48; // convert to it's real int value
 822:	20 e3       	ldi	r18, 0x30	; 48
 824:	42 1a       	sub	r4, r18
 826:	51 08       	sbc	r5, r1
 828:	61 08       	sbc	r6, r1
 82a:	71 08       	sbc	r7, r1
			LCD_write_char('*');
 82c:	8a e2       	ldi	r24, 0x2A	; 42
 82e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_write_char>

			currentPassword += num1 ;
 832:	4c 0c       	add	r4, r12
 834:	5d 1c       	adc	r5, r13
 836:	8f ef       	ldi	r24, 0xFF	; 255
 838:	94 e3       	ldi	r25, 0x34	; 52
 83a:	2c e0       	ldi	r18, 0x0C	; 12
 83c:	81 50       	subi	r24, 0x01	; 1
 83e:	90 40       	sbci	r25, 0x00	; 0
 840:	20 40       	sbci	r18, 0x00	; 0
 842:	e1 f7       	brne	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 844:	00 c0       	rjmp	.+0      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 846:	00 00       	nop
		
			_delay_ms(500);
		
			LCD_write_command(0x01);
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
			if(currentPassword == lockerPassword){
 84e:	c4 15       	cp	r28, r4
 850:	d5 05       	cpc	r29, r5
 852:	59 f4       	brne	.+22     	; 0x86a <__stack+0xb>
				LCD_write_command(0x01); //Clear display
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
				LCD_write_string((uint8_t *) "Door is Opened");
 85a:	85 e8       	ldi	r24, 0x85	; 133
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_write_string>
			LCD_write_string((uint8_t * )"Door Is Locked ");
		 }
		 
		 
		 else if (keypadValue != -1 && openState == 0) {
			resetPassword = 0;
 862:	00 e0       	ldi	r16, 0x00	; 0
		
			LCD_write_command(0x01);
			if(currentPassword == lockerPassword){
				LCD_write_command(0x01); //Clear display
				LCD_write_string((uint8_t *) "Door is Opened");
				openState = 1;
 864:	bb 24       	eor	r11, r11
 866:	b3 94       	inc	r11
 868:	4f ce       	rjmp	.-866    	; 0x508 <main+0x30>
			}
			else{
				LCD_write_command(0x01); //Clear display
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
				LCD_write_string((uint8_t *) "Try again");
 870:	84 e9       	ldi	r24, 0x94	; 148
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_write_string>
				
				Led(1);
 878:	88 b3       	in	r24, 0x18	; 24
 87a:	81 60       	ori	r24, 0x01	; 1
 87c:	88 bb       	out	0x18, r24	; 24
 87e:	8f e7       	ldi	r24, 0x7F	; 127
 880:	9a e1       	ldi	r25, 0x1A	; 26
 882:	26 e0       	ldi	r18, 0x06	; 6
 884:	81 50       	subi	r24, 0x01	; 1
 886:	90 40       	sbci	r25, 0x00	; 0
 888:	20 40       	sbci	r18, 0x00	; 0
 88a:	e1 f7       	brne	.-8      	; 0x884 <__stack+0x25>
 88c:	00 c0       	rjmp	.+0      	; 0x88e <__stack+0x2f>
 88e:	00 00       	nop
				_delay_ms(250);
				Led(0);
 890:	88 b3       	in	r24, 0x18	; 24
 892:	8e 7f       	andi	r24, 0xFE	; 254
 894:	88 bb       	out	0x18, r24	; 24
			LCD_write_string((uint8_t * )"Door Is Locked ");
		 }
		 
		 
		 else if (keypadValue != -1 && openState == 0) {
			resetPassword = 0;
 896:	00 e0       	ldi	r16, 0x00	; 0
 898:	37 ce       	rjmp	.-914    	; 0x508 <main+0x30>
				Led(0);

			}
			
			}
			else if (keypadValue == '0' && openState == 1) {
 89a:	10 33       	cpi	r17, 0x30	; 48
 89c:	21 f5       	brne	.+72     	; 0x8e6 <__stack+0x87>
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	b8 12       	cpse	r11, r24
 8a2:	21 c0       	rjmp	.+66     	; 0x8e6 <__stack+0x87>
				while (KEYPAD_Read() != -1);
 8a4:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 8a8:	8f 3f       	cpi	r24, 0xFF	; 255
 8aa:	e1 f7       	brne	.-8      	; 0x8a4 <__stack+0x45>
				resetPassword++;
 8ac:	0f 5f       	subi	r16, 0xFF	; 255
				if (resetPassword == 6){
 8ae:	06 30       	cpi	r16, 0x06	; 6
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <__stack+0x55>
 8b2:	2a ce       	rjmp	.-940    	; 0x508 <main+0x30>
					LCD_write_command(0x01); //Clear display
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_write_command>
					LCD_write_string((uint8_t *) "Password reset");
 8ba:	8e e9       	ldi	r24, 0x9E	; 158
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <LCD_write_string>
					lockerPassword = 0x0000;
					Led(1);
 8c2:	88 b3       	in	r24, 0x18	; 24
 8c4:	81 60       	ori	r24, 0x01	; 1
 8c6:	88 bb       	out	0x18, r24	; 24
 8c8:	9f ef       	ldi	r25, 0xFF	; 255
 8ca:	29 e6       	ldi	r18, 0x69	; 105
 8cc:	88 e1       	ldi	r24, 0x18	; 24
 8ce:	91 50       	subi	r25, 0x01	; 1
 8d0:	20 40       	sbci	r18, 0x00	; 0
 8d2:	80 40       	sbci	r24, 0x00	; 0
 8d4:	e1 f7       	brne	.-8      	; 0x8ce <__stack+0x6f>
 8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <__stack+0x79>
 8d8:	00 00       	nop
					_delay_ms(1000);
					Led(0);
 8da:	88 b3       	in	r24, 0x18	; 24
 8dc:	8e 7f       	andi	r24, 0xFE	; 254
 8de:	88 bb       	out	0x18, r24	; 24
				while (KEYPAD_Read() != -1);
				resetPassword++;
				if (resetPassword == 6){
					LCD_write_command(0x01); //Clear display
					LCD_write_string((uint8_t *) "Password reset");
					lockerPassword = 0x0000;
 8e0:	c0 e0       	ldi	r28, 0x00	; 0
 8e2:	d0 e0       	ldi	r29, 0x00	; 0
 8e4:	11 ce       	rjmp	.-990    	; 0x508 <main+0x30>
					_delay_ms(1000);
					Led(0);
				}

			}
			else if (keypadValue != -1){
 8e6:	1f 3f       	cpi	r17, 0xFF	; 255
 8e8:	09 f4       	brne	.+2      	; 0x8ec <__stack+0x8d>
 8ea:	0e ce       	rjmp	.-996    	; 0x508 <main+0x30>
				while (KEYPAD_Read() != -1);
 8ec:	0e 94 4f 00 	call	0x9e	; 0x9e <KEYPAD_Read>
 8f0:	8f 3f       	cpi	r24, 0xFF	; 255
 8f2:	e1 f7       	brne	.-8      	; 0x8ec <__stack+0x8d>
				resetPassword = 0;
 8f4:	00 e0       	ldi	r16, 0x00	; 0
 8f6:	08 ce       	rjmp	.-1008   	; 0x508 <main+0x30>

000008f8 <__umulhisi3>:
 8f8:	a2 9f       	mul	r26, r18
 8fa:	b0 01       	movw	r22, r0
 8fc:	b3 9f       	mul	r27, r19
 8fe:	c0 01       	movw	r24, r0
 900:	a3 9f       	mul	r26, r19
 902:	70 0d       	add	r23, r0
 904:	81 1d       	adc	r24, r1
 906:	11 24       	eor	r1, r1
 908:	91 1d       	adc	r25, r1
 90a:	b2 9f       	mul	r27, r18
 90c:	70 0d       	add	r23, r0
 90e:	81 1d       	adc	r24, r1
 910:	11 24       	eor	r1, r1
 912:	91 1d       	adc	r25, r1
 914:	08 95       	ret

00000916 <_exit>:
 916:	f8 94       	cli

00000918 <__stop_program>:
 918:	ff cf       	rjmp	.-2      	; 0x918 <__stop_program>
